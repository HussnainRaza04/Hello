//// [tests/cases/compiler/bigintWithoutLib.ts] ////

=== bigintWithoutLib.ts ===
// Every line should error because these builtins are not declared

// Test BigInt functions
let bigintVal: bigint = BigInt(123);
>bigintVal : bigint
>          : ^^^^^^
>BigInt(123) : any
>            : ^^^
>BigInt : any
>       : ^^^
>123 : 123
>    : ^^^

bigintVal = BigInt("456");
>bigintVal = BigInt("456") : any
>                          : ^^^
>bigintVal : bigint
>          : ^^^^^^
>BigInt("456") : any
>              : ^^^
>BigInt : any
>       : ^^^
>"456" : "456"
>      : ^^^^^

new BigInt(123);
>new BigInt(123) : any
>                : ^^^
>BigInt : any
>       : ^^^
>123 : 123
>    : ^^^

bigintVal = BigInt.asIntN(8, 0xFFFFn);
>bigintVal = BigInt.asIntN(8, 0xFFFFn) : any
>                                      : ^^^
>bigintVal : bigint
>          : ^^^^^^
>BigInt.asIntN(8, 0xFFFFn) : any
>                          : ^^^
>BigInt.asIntN : any
>              : ^^^
>BigInt : any
>       : ^^^
>asIntN : any
>       : ^^^
>8 : 8
>  : ^
>0xFFFFn : 65535n
>        : ^^^^^^

bigintVal = BigInt.asUintN(8, 0xFFFFn);
>bigintVal = BigInt.asUintN(8, 0xFFFFn) : any
>                                       : ^^^
>bigintVal : bigint
>          : ^^^^^^
>BigInt.asUintN(8, 0xFFFFn) : any
>                           : ^^^
>BigInt.asUintN : any
>               : ^^^
>BigInt : any
>       : ^^^
>asUintN : any
>        : ^^^
>8 : 8
>  : ^
>0xFFFFn : 65535n
>        : ^^^^^^

bigintVal = bigintVal.valueOf(); // should error - bigintVal inferred as {}
>bigintVal = bigintVal.valueOf() : Object
>                                : ^^^^^^
>bigintVal : bigint
>          : ^^^^^^
>bigintVal.valueOf() : Object
>                    : ^^^^^^
>bigintVal.valueOf : () => Object
>                  : ^^^^^^      
>bigintVal : bigint
>          : ^^^^^^
>valueOf : () => Object
>        : ^^^^^^      

let stringVal: string = bigintVal.toString(); // should not error - bigintVal inferred as {}
>stringVal : string
>          : ^^^^^^
>bigintVal.toString() : string
>                     : ^^^^^^
>bigintVal.toString : () => string
>                   : ^^^^^^      
>bigintVal : bigint
>          : ^^^^^^
>toString : () => string
>         : ^^^^^^      

stringVal = bigintVal.toString(2); // should error - bigintVal inferred as {}
>stringVal = bigintVal.toString(2) : string
>                                  : ^^^^^^
>stringVal : string
>          : ^^^^^^
>bigintVal.toString(2) : string
>                      : ^^^^^^
>bigintVal.toString : () => string
>                   : ^^^^^^      
>bigintVal : bigint
>          : ^^^^^^
>toString : () => string
>         : ^^^^^^      
>2 : 2
>  : ^

stringVal = bigintVal.toLocaleString(); // should not error - bigintVal inferred as {}
>stringVal = bigintVal.toLocaleString() : string
>                                       : ^^^^^^
>stringVal : string
>          : ^^^^^^
>bigintVal.toLocaleString() : string
>                           : ^^^^^^
>bigintVal.toLocaleString : () => string
>                         : ^^^^^^      
>bigintVal : bigint
>          : ^^^^^^
>toLocaleString : () => string
>               : ^^^^^^      

stringVal = bigintVal.toLocaleString('de-DE'); // should not error - bigintVal inferred as {}
>stringVal = bigintVal.toLocaleString('de-DE') : string
>                                              : ^^^^^^
>stringVal : string
>          : ^^^^^^
>bigintVal.toLocaleString('de-DE') : string
>                                  : ^^^^^^
>bigintVal.toLocaleString : () => string
>                         : ^^^^^^      
>bigintVal : bigint
>          : ^^^^^^
>toLocaleString : () => string
>               : ^^^^^^      
>'de-DE' : "de-DE"
>        : ^^^^^^^

stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency' }); // should not error - bigintVal inferred as {}
>stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency' }) : string
>                                                                     : ^^^^^^
>stringVal : string
>          : ^^^^^^
>bigintVal.toLocaleString('de-DE', { style: 'currency' }) : string
>                                                         : ^^^^^^
>bigintVal.toLocaleString : () => string
>                         : ^^^^^^      
>bigintVal : bigint
>          : ^^^^^^
>toLocaleString : () => string
>               : ^^^^^^      
>'de-DE' : "de-DE"
>        : ^^^^^^^
>{ style: 'currency' } : { style: string; }
>                      : ^^^^^^^^^^^^^^^^^^
>style : string
>      : ^^^^^^
>'currency' : "currency"
>           : ^^^^^^^^^^

stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }) // should not error - bigintVal inferred as {}
>stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }) : string
>                                                                                      : ^^^^^^
>stringVal : string
>          : ^^^^^^
>bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }) : string
>                                                                          : ^^^^^^
>bigintVal.toLocaleString : () => string
>                         : ^^^^^^      
>bigintVal : bigint
>          : ^^^^^^
>toLocaleString : () => string
>               : ^^^^^^      
>'de-DE' : "de-DE"
>        : ^^^^^^^
>{ style: 'currency', currency: 'EUR' } : { style: string; currency: string; }
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>style : string
>      : ^^^^^^
>'currency' : "currency"
>           : ^^^^^^^^^^
>currency : string
>         : ^^^^^^
>'EUR' : "EUR"
>      : ^^^^^

// Test BigInt64Array
let bigIntArray: BigInt64Array = new BigInt64Array();
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array() : any
>                    : ^^^
>BigInt64Array : any
>              : ^^^

bigIntArray = new BigInt64Array(10);
>bigIntArray = new BigInt64Array(10) : any
>                                    : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array(10) : any
>                      : ^^^
>BigInt64Array : any
>              : ^^^
>10 : 10
>   : ^^

bigIntArray = new BigInt64Array([1n, 2n, 3n]);
>bigIntArray = new BigInt64Array([1n, 2n, 3n]) : any
>                                              : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array([1n, 2n, 3n]) : any
>                                : ^^^
>BigInt64Array : any
>              : ^^^
>[1n, 2n, 3n] : bigint[]
>             : ^^^^^^^^
>1n : 1n
>   : ^^
>2n : 2n
>   : ^^
>3n : 3n
>   : ^^

bigIntArray = new BigInt64Array({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigIntArray = new BigInt64Array({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                                  : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                    : ^^^
>BigInt64Array : any
>              : ^^^
>{0: 1n, 1: 2n, 2: 3n, length: 3} : { 0: bigint; 1: bigint; 2: bigint; length: number; }
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : bigint
>  : ^^^^^^
>1n : 1n
>   : ^^
>1 : bigint
>  : ^^^^^^
>2n : 2n
>   : ^^
>2 : bigint
>  : ^^^^^^
>3n : 3n
>   : ^^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^

bigIntArray = new BigInt64Array([1, 2, 3]);
>bigIntArray = new BigInt64Array([1, 2, 3]) : any
>                                           : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array([1, 2, 3]) : any
>                             : ^^^
>BigInt64Array : any
>              : ^^^
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

bigIntArray = new BigInt64Array({0: 1, 1: 2, 2: 3, length: 3});
>bigIntArray = new BigInt64Array({0: 1, 1: 2, 2: 3, length: 3}) : any
>                                                               : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array({0: 1, 1: 2, 2: 3, length: 3}) : any
>                                                 : ^^^
>BigInt64Array : any
>              : ^^^
>{0: 1, 1: 2, 2: 3, length: 3} : { 0: number; 1: number; 2: number; length: number; }
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : number
>  : ^^^^^^
>1 : 1
>  : ^
>1 : number
>  : ^^^^^^
>2 : 2
>  : ^
>2 : number
>  : ^^^^^^
>3 : 3
>  : ^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^

bigIntArray = new BigInt64Array(new ArrayBuffer(80));
>bigIntArray = new BigInt64Array(new ArrayBuffer(80)) : any
>                                                     : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array(new ArrayBuffer(80)) : any
>                                       : ^^^
>BigInt64Array : any
>              : ^^^
>new ArrayBuffer(80) : ArrayBuffer
>                    : ^^^^^^^^^^^
>ArrayBuffer : ArrayBufferConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>80 : 80
>   : ^^

bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8);
>bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8) : any
>                                                        : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array(new ArrayBuffer(80), 8) : any
>                                          : ^^^
>BigInt64Array : any
>              : ^^^
>new ArrayBuffer(80) : ArrayBuffer
>                    : ^^^^^^^^^^^
>ArrayBuffer : ArrayBufferConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>80 : 80
>   : ^^
>8 : 8
>  : ^

bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8, 3);
>bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8, 3) : any
>                                                           : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>new BigInt64Array(new ArrayBuffer(80), 8, 3) : any
>                                             : ^^^
>BigInt64Array : any
>              : ^^^
>new ArrayBuffer(80) : ArrayBuffer
>                    : ^^^^^^^^^^^
>ArrayBuffer : ArrayBufferConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>80 : 80
>   : ^^
>8 : 8
>  : ^
>3 : 3
>  : ^

bigIntArray = BigInt64Array.from([1n, 2n, 3n]);
>bigIntArray = BigInt64Array.from([1n, 2n, 3n]) : any
>                                               : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>BigInt64Array.from([1n, 2n, 3n]) : any
>                                 : ^^^
>BigInt64Array.from : any
>                   : ^^^
>BigInt64Array : any
>              : ^^^
>from : any
>     : ^^^
>[1n, 2n, 3n] : bigint[]
>             : ^^^^^^^^
>1n : 1n
>   : ^^
>2n : 2n
>   : ^^
>3n : 3n
>   : ^^

bigIntArray = BigInt64Array.from([1n, 2n, 3n], n => n * 10n);
>bigIntArray = BigInt64Array.from([1n, 2n, 3n], n => n * 10n) : any
>                                                             : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>BigInt64Array.from([1n, 2n, 3n], n => n * 10n) : any
>                                               : ^^^
>BigInt64Array.from : any
>                   : ^^^
>BigInt64Array : any
>              : ^^^
>from : any
>     : ^^^
>[1n, 2n, 3n] : bigint[]
>             : ^^^^^^^^
>1n : 1n
>   : ^^
>2n : 2n
>   : ^^
>3n : 3n
>   : ^^
>n => n * 10n : (n: any) => bigint
>             : ^ ^^^^^^^^^^^^^^^^
>n : any
>  : ^^^
>n * 10n : bigint
>        : ^^^^^^
>n : any
>  : ^^^
>10n : 10n
>    : ^^^

bigIntArray = BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigIntArray = BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                                   : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                     : ^^^
>BigInt64Array.from : any
>                   : ^^^
>BigInt64Array : any
>              : ^^^
>from : any
>     : ^^^
>{0: 1n, 1: 2n, 2: 3n, length: 3} : { 0: bigint; 1: bigint; 2: bigint; length: number; }
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : bigint
>  : ^^^^^^
>1n : 1n
>   : ^^
>1 : bigint
>  : ^^^^^^
>2n : 2n
>   : ^^
>2 : bigint
>  : ^^^^^^
>3n : 3n
>   : ^^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^

bigIntArray = BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n);
>bigIntArray = BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n) : any
>                                                                                 : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n) : any
>                                                                   : ^^^
>BigInt64Array.from : any
>                   : ^^^
>BigInt64Array : any
>              : ^^^
>from : any
>     : ^^^
>{0: 1n, 1: 2n, 2: 3n, length: 3} : { 0: bigint; 1: bigint; 2: bigint; length: number; }
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : bigint
>  : ^^^^^^
>1n : 1n
>   : ^^
>1 : bigint
>  : ^^^^^^
>2n : 2n
>   : ^^
>2 : bigint
>  : ^^^^^^
>3n : 3n
>   : ^^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^
>n => n * 10n : (n: any) => bigint
>             : ^ ^^^^^^^^^^^^^^^^
>n : any
>  : ^^^
>n * 10n : bigint
>        : ^^^^^^
>n : any
>  : ^^^
>10n : 10n
>    : ^^^

bigUintArray = BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigUintArray = BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                                     : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                      : ^^^
>BigUint64Array.from : any
>                    : ^^^
>BigUint64Array : any
>               : ^^^
>from : any
>     : ^^^
>{0: 1n, 1: 2n, 2: 3n, length: 3} : { 0: bigint; 1: bigint; 2: bigint; length: number; }
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : bigint
>  : ^^^^^^
>1n : 1n
>   : ^^
>1 : bigint
>  : ^^^^^^
>2n : 2n
>   : ^^
>2 : bigint
>  : ^^^^^^
>3n : 3n
>   : ^^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^

bigUintArray = BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n);
>bigUintArray = BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n) : any
>                                                                                   : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n) : any
>                                                                    : ^^^
>BigUint64Array.from : any
>                    : ^^^
>BigUint64Array : any
>               : ^^^
>from : any
>     : ^^^
>{0: 1n, 1: 2n, 2: 3n, length: 3} : { 0: bigint; 1: bigint; 2: bigint; length: number; }
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : bigint
>  : ^^^^^^
>1n : 1n
>   : ^^
>1 : bigint
>  : ^^^^^^
>2n : 2n
>   : ^^
>2 : bigint
>  : ^^^^^^
>3n : 3n
>   : ^^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^
>n => n * 10n : (n: any) => bigint
>             : ^ ^^^^^^^^^^^^^^^^
>n : any
>  : ^^^
>n * 10n : bigint
>        : ^^^^^^
>n : any
>  : ^^^
>10n : 10n
>    : ^^^

bigIntArray = BigInt64Array.from(['1', '2', '3']);
>bigIntArray = BigInt64Array.from(['1', '2', '3']) : any
>                                                  : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>BigInt64Array.from(['1', '2', '3']) : any
>                                    : ^^^
>BigInt64Array.from : any
>                   : ^^^
>BigInt64Array : any
>              : ^^^
>from : any
>     : ^^^
>['1', '2', '3'] : string[]
>                : ^^^^^^^^
>'1' : "1"
>    : ^^^
>'2' : "2"
>    : ^^^
>'3' : "3"
>    : ^^^

bigIntArray = BigInt64Array.from(['1', '2', '3'], s => BigInt(s));
>bigIntArray = BigInt64Array.from(['1', '2', '3'], s => BigInt(s)) : any
>                                                                  : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>BigInt64Array.from(['1', '2', '3'], s => BigInt(s)) : any
>                                                    : ^^^
>BigInt64Array.from : any
>                   : ^^^
>BigInt64Array : any
>              : ^^^
>from : any
>     : ^^^
>['1', '2', '3'] : string[]
>                : ^^^^^^^^
>'1' : "1"
>    : ^^^
>'2' : "2"
>    : ^^^
>'3' : "3"
>    : ^^^
>s => BigInt(s) : (s: any) => any
>               : ^ ^^^^^^^^^^^^^
>s : any
>  : ^^^
>BigInt(s) : any
>          : ^^^
>BigInt : any
>       : ^^^
>s : any
>  : ^^^

let len: number = bigIntArray.length;
>len : number
>    : ^^^^^^
>bigIntArray.length : any
>                   : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>length : any
>       : ^^^

bigIntArray.length = 10;
>bigIntArray.length = 10 : 10
>                        : ^^
>bigIntArray.length : any
>                   : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>length : any
>       : ^^^
>10 : 10
>   : ^^

let arrayBufferLike: ArrayBufferView = bigIntArray;
>arrayBufferLike : ArrayBufferView
>                : ^^^^^^^^^^^^^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^

// Test BigUint64Array
let bigUintArray: BigUint64Array = new BigUint64Array();
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array() : any
>                     : ^^^
>BigUint64Array : any
>               : ^^^

bigUintArray = new BigUint64Array(10);
>bigUintArray = new BigUint64Array(10) : any
>                                      : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array(10) : any
>                       : ^^^
>BigUint64Array : any
>               : ^^^
>10 : 10
>   : ^^

bigUintArray = new BigUint64Array([1n, 2n, 3n]);
>bigUintArray = new BigUint64Array([1n, 2n, 3n]) : any
>                                                : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array([1n, 2n, 3n]) : any
>                                 : ^^^
>BigUint64Array : any
>               : ^^^
>[1n, 2n, 3n] : bigint[]
>             : ^^^^^^^^
>1n : 1n
>   : ^^
>2n : 2n
>   : ^^
>3n : 3n
>   : ^^

bigUintArray = new BigUint64Array({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigUintArray = new BigUint64Array({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                                    : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array({0: 1n, 1: 2n, 2: 3n, length: 3}) : any
>                                                     : ^^^
>BigUint64Array : any
>               : ^^^
>{0: 1n, 1: 2n, 2: 3n, length: 3} : { 0: bigint; 1: bigint; 2: bigint; length: number; }
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : bigint
>  : ^^^^^^
>1n : 1n
>   : ^^
>1 : bigint
>  : ^^^^^^
>2n : 2n
>   : ^^
>2 : bigint
>  : ^^^^^^
>3n : 3n
>   : ^^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^

bigUintArray = new BigUint64Array([1, 2, 3]);
>bigUintArray = new BigUint64Array([1, 2, 3]) : any
>                                             : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array([1, 2, 3]) : any
>                              : ^^^
>BigUint64Array : any
>               : ^^^
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

bigUintArray = new BigUint64Array({0: 1, 1: 2, 2: 3, length: 3});
>bigUintArray = new BigUint64Array({0: 1, 1: 2, 2: 3, length: 3}) : any
>                                                                 : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array({0: 1, 1: 2, 2: 3, length: 3}) : any
>                                                  : ^^^
>BigUint64Array : any
>               : ^^^
>{0: 1, 1: 2, 2: 3, length: 3} : { 0: number; 1: number; 2: number; length: number; }
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : number
>  : ^^^^^^
>1 : 1
>  : ^
>1 : number
>  : ^^^^^^
>2 : 2
>  : ^
>2 : number
>  : ^^^^^^
>3 : 3
>  : ^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^

bigUintArray = new BigUint64Array(new ArrayBuffer(80));
>bigUintArray = new BigUint64Array(new ArrayBuffer(80)) : any
>                                                       : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array(new ArrayBuffer(80)) : any
>                                        : ^^^
>BigUint64Array : any
>               : ^^^
>new ArrayBuffer(80) : ArrayBuffer
>                    : ^^^^^^^^^^^
>ArrayBuffer : ArrayBufferConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>80 : 80
>   : ^^

bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8);
>bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8) : any
>                                                          : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array(new ArrayBuffer(80), 8) : any
>                                           : ^^^
>BigUint64Array : any
>               : ^^^
>new ArrayBuffer(80) : ArrayBuffer
>                    : ^^^^^^^^^^^
>ArrayBuffer : ArrayBufferConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>80 : 80
>   : ^^
>8 : 8
>  : ^

bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8, 3);
>bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8, 3) : any
>                                                             : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>new BigUint64Array(new ArrayBuffer(80), 8, 3) : any
>                                              : ^^^
>BigUint64Array : any
>               : ^^^
>new ArrayBuffer(80) : ArrayBuffer
>                    : ^^^^^^^^^^^
>ArrayBuffer : ArrayBufferConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>80 : 80
>   : ^^
>8 : 8
>  : ^
>3 : 3
>  : ^

bigUintArray = BigUint64Array.from([1n, 2n, 3n]);
>bigUintArray = BigUint64Array.from([1n, 2n, 3n]) : any
>                                                 : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>BigUint64Array.from([1n, 2n, 3n]) : any
>                                  : ^^^
>BigUint64Array.from : any
>                    : ^^^
>BigUint64Array : any
>               : ^^^
>from : any
>     : ^^^
>[1n, 2n, 3n] : bigint[]
>             : ^^^^^^^^
>1n : 1n
>   : ^^
>2n : 2n
>   : ^^
>3n : 3n
>   : ^^

bigUintArray = BigUint64Array.from([1n, 2n, 3n], n => n * 10n);
>bigUintArray = BigUint64Array.from([1n, 2n, 3n], n => n * 10n) : any
>                                                               : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>BigUint64Array.from([1n, 2n, 3n], n => n * 10n) : any
>                                                : ^^^
>BigUint64Array.from : any
>                    : ^^^
>BigUint64Array : any
>               : ^^^
>from : any
>     : ^^^
>[1n, 2n, 3n] : bigint[]
>             : ^^^^^^^^
>1n : 1n
>   : ^^
>2n : 2n
>   : ^^
>3n : 3n
>   : ^^
>n => n * 10n : (n: any) => bigint
>             : ^ ^^^^^^^^^^^^^^^^
>n : any
>  : ^^^
>n * 10n : bigint
>        : ^^^^^^
>n : any
>  : ^^^
>10n : 10n
>    : ^^^

bigUintArray = BigUint64Array.from(['1', '2', '3']);
>bigUintArray = BigUint64Array.from(['1', '2', '3']) : any
>                                                    : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>BigUint64Array.from(['1', '2', '3']) : any
>                                     : ^^^
>BigUint64Array.from : any
>                    : ^^^
>BigUint64Array : any
>               : ^^^
>from : any
>     : ^^^
>['1', '2', '3'] : string[]
>                : ^^^^^^^^
>'1' : "1"
>    : ^^^
>'2' : "2"
>    : ^^^
>'3' : "3"
>    : ^^^

bigUintArray = BigUint64Array.from(['1', '2', '3'], s => BigInt(s));
>bigUintArray = BigUint64Array.from(['1', '2', '3'], s => BigInt(s)) : any
>                                                                    : ^^^
>bigUintArray : BigUint64Array
>             : ^^^^^^^^^^^^^^
>BigUint64Array.from(['1', '2', '3'], s => BigInt(s)) : any
>                                                     : ^^^
>BigUint64Array.from : any
>                    : ^^^
>BigUint64Array : any
>               : ^^^
>from : any
>     : ^^^
>['1', '2', '3'] : string[]
>                : ^^^^^^^^
>'1' : "1"
>    : ^^^
>'2' : "2"
>    : ^^^
>'3' : "3"
>    : ^^^
>s => BigInt(s) : (s: any) => any
>               : ^ ^^^^^^^^^^^^^
>s : any
>  : ^^^
>BigInt(s) : any
>          : ^^^
>BigInt : any
>       : ^^^
>s : any
>  : ^^^

len = bigIntArray.length;
>len = bigIntArray.length : any
>                         : ^^^
>len : number
>    : ^^^^^^
>bigIntArray.length : any
>                   : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>length : any
>       : ^^^

bigIntArray.length = 10;
>bigIntArray.length = 10 : 10
>                        : ^^
>bigIntArray.length : any
>                   : ^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^
>length : any
>       : ^^^
>10 : 10
>   : ^^

arrayBufferLike = bigIntArray;
>arrayBufferLike = bigIntArray : BigInt64Array
>                              : ^^^^^^^^^^^^^
>arrayBufferLike : ArrayBufferView
>                : ^^^^^^^^^^^^^^^
>bigIntArray : BigInt64Array
>            : ^^^^^^^^^^^^^

// Test added DataView methods
const dataView = new DataView(new ArrayBuffer(80));
>dataView : DataView
>         : ^^^^^^^^
>new DataView(new ArrayBuffer(80)) : DataView
>                                  : ^^^^^^^^
>DataView : DataViewConstructor
>         : ^^^^^^^^^^^^^^^^^^^
>new ArrayBuffer(80) : ArrayBuffer
>                    : ^^^^^^^^^^^
>ArrayBuffer : ArrayBufferConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>80 : 80
>   : ^^

dataView.setBigInt64(1, -1n);
>dataView.setBigInt64(1, -1n) : any
>                             : ^^^
>dataView.setBigInt64 : any
>                     : ^^^
>dataView : DataView
>         : ^^^^^^^^
>setBigInt64 : any
>            : ^^^
>1 : 1
>  : ^
>-1n : -1n
>    : ^^^
>1n : 1n
>   : ^^

dataView.setBigInt64(1, -1n, true);
>dataView.setBigInt64(1, -1n, true) : any
>                                   : ^^^
>dataView.setBigInt64 : any
>                     : ^^^
>dataView : DataView
>         : ^^^^^^^^
>setBigInt64 : any
>            : ^^^
>1 : 1
>  : ^
>-1n : -1n
>    : ^^^
>1n : 1n
>   : ^^
>true : true
>     : ^^^^

dataView.setBigInt64(1, -1);
>dataView.setBigInt64(1, -1) : any
>                            : ^^^
>dataView.setBigInt64 : any
>                     : ^^^
>dataView : DataView
>         : ^^^^^^^^
>setBigInt64 : any
>            : ^^^
>1 : 1
>  : ^
>-1 : -1
>   : ^^
>1 : 1
>  : ^

dataView.setBigUint64(2, 123n);
>dataView.setBigUint64(2, 123n) : any
>                               : ^^^
>dataView.setBigUint64 : any
>                      : ^^^
>dataView : DataView
>         : ^^^^^^^^
>setBigUint64 : any
>             : ^^^
>2 : 2
>  : ^
>123n : 123n
>     : ^^^^

dataView.setBigUint64(2, 123n, true);
>dataView.setBigUint64(2, 123n, true) : any
>                                     : ^^^
>dataView.setBigUint64 : any
>                      : ^^^
>dataView : DataView
>         : ^^^^^^^^
>setBigUint64 : any
>             : ^^^
>2 : 2
>  : ^
>123n : 123n
>     : ^^^^
>true : true
>     : ^^^^

dataView.setBigUint64(2, 123);
>dataView.setBigUint64(2, 123) : any
>                              : ^^^
>dataView.setBigUint64 : any
>                      : ^^^
>dataView : DataView
>         : ^^^^^^^^
>setBigUint64 : any
>             : ^^^
>2 : 2
>  : ^
>123 : 123
>    : ^^^

bigintVal = dataView.getBigInt64(1);
>bigintVal = dataView.getBigInt64(1) : any
>                                    : ^^^
>bigintVal : bigint
>          : ^^^^^^
>dataView.getBigInt64(1) : any
>                        : ^^^
>dataView.getBigInt64 : any
>                     : ^^^
>dataView : DataView
>         : ^^^^^^^^
>getBigInt64 : any
>            : ^^^
>1 : 1
>  : ^

bigintVal = dataView.getBigInt64(1, true);
>bigintVal = dataView.getBigInt64(1, true) : any
>                                          : ^^^
>bigintVal : bigint
>          : ^^^^^^
>dataView.getBigInt64(1, true) : any
>                              : ^^^
>dataView.getBigInt64 : any
>                     : ^^^
>dataView : DataView
>         : ^^^^^^^^
>getBigInt64 : any
>            : ^^^
>1 : 1
>  : ^
>true : true
>     : ^^^^

bigintVal = dataView.getBigUint64(2);
>bigintVal = dataView.getBigUint64(2) : any
>                                     : ^^^
>bigintVal : bigint
>          : ^^^^^^
>dataView.getBigUint64(2) : any
>                         : ^^^
>dataView.getBigUint64 : any
>                      : ^^^
>dataView : DataView
>         : ^^^^^^^^
>getBigUint64 : any
>             : ^^^
>2 : 2
>  : ^

bigintVal = dataView.getBigUint64(2, true);
>bigintVal = dataView.getBigUint64(2, true) : any
>                                           : ^^^
>bigintVal : bigint
>          : ^^^^^^
>dataView.getBigUint64(2, true) : any
>                               : ^^^
>dataView.getBigUint64 : any
>                      : ^^^
>dataView : DataView
>         : ^^^^^^^^
>getBigUint64 : any
>             : ^^^
>2 : 2
>  : ^
>true : true
>     : ^^^^

// Test Intl methods with new parameter type
new Intl.NumberFormat("fr").format(3000n);
>new Intl.NumberFormat("fr").format(3000n) : string
>                                          : ^^^^^^
>new Intl.NumberFormat("fr").format : (value: number) => string
>                                   : ^     ^^      ^^^^^      
>new Intl.NumberFormat("fr") : Intl.NumberFormat
>                            : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"fr" : "fr"
>     : ^^^^
>format : (value: number) => string
>       : ^     ^^      ^^^^^      
>3000n : 3000n
>      : ^^^^^

new Intl.NumberFormat("fr").format(bigintVal);
>new Intl.NumberFormat("fr").format(bigintVal) : string
>                                              : ^^^^^^
>new Intl.NumberFormat("fr").format : (value: number) => string
>                                   : ^     ^^      ^^^^^      
>new Intl.NumberFormat("fr") : Intl.NumberFormat
>                            : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"fr" : "fr"
>     : ^^^^
>format : (value: number) => string
>       : ^     ^^      ^^^^^      
>bigintVal : bigint
>          : ^^^^^^

