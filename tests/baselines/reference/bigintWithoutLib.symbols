//// [tests/cases/compiler/bigintWithoutLib.ts] ////

=== bigintWithoutLib.ts ===
// Every line should error because these builtins are not declared

// Test BigInt functions
let bigintVal: bigint = BigInt(123);
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))

bigintVal = BigInt("456");
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))

new BigInt(123);
bigintVal = BigInt.asIntN(8, 0xFFFFn);
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))

bigintVal = BigInt.asUintN(8, 0xFFFFn);
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))

bigintVal = bigintVal.valueOf(); // should error - bigintVal inferred as {}
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>bigintVal.valueOf : Symbol(Object.valueOf, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>valueOf : Symbol(Object.valueOf, Decl(lib.es5.d.ts, --, --))

let stringVal: string = bigintVal.toString(); // should not error - bigintVal inferred as {}
>stringVal : Symbol(stringVal, Decl(bigintWithoutLib.ts, 9, 3))
>bigintVal.toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))

stringVal = bigintVal.toString(2); // should error - bigintVal inferred as {}
>stringVal : Symbol(stringVal, Decl(bigintWithoutLib.ts, 9, 3))
>bigintVal.toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --))

stringVal = bigintVal.toLocaleString(); // should not error - bigintVal inferred as {}
>stringVal : Symbol(stringVal, Decl(bigintWithoutLib.ts, 9, 3))
>bigintVal.toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))

stringVal = bigintVal.toLocaleString('de-DE'); // should not error - bigintVal inferred as {}
>stringVal : Symbol(stringVal, Decl(bigintWithoutLib.ts, 9, 3))
>bigintVal.toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))

stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency' }); // should not error - bigintVal inferred as {}
>stringVal : Symbol(stringVal, Decl(bigintWithoutLib.ts, 9, 3))
>bigintVal.toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))
>style : Symbol(style, Decl(bigintWithoutLib.ts, 13, 47))

stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }) // should not error - bigintVal inferred as {}
>stringVal : Symbol(stringVal, Decl(bigintWithoutLib.ts, 9, 3))
>bigintVal.toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --))
>style : Symbol(style, Decl(bigintWithoutLib.ts, 14, 47))
>currency : Symbol(currency, Decl(bigintWithoutLib.ts, 14, 66))

// Test BigInt64Array
let bigIntArray: BigInt64Array = new BigInt64Array();
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>BigInt64Array : Symbol(BigInt64Array)

bigIntArray = new BigInt64Array(10);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

bigIntArray = new BigInt64Array([1n, 2n, 3n]);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

bigIntArray = new BigInt64Array({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 20, 33))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 20, 39))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 20, 46))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 20, 53))

bigIntArray = new BigInt64Array([1, 2, 3]);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

bigIntArray = new BigInt64Array({0: 1, 1: 2, 2: 3, length: 3});
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 22, 33))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 22, 38))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 22, 44))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 22, 50))

bigIntArray = new BigInt64Array(new ArrayBuffer(80));
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8, 3);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

bigIntArray = BigInt64Array.from([1n, 2n, 3n]);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

bigIntArray = BigInt64Array.from([1n, 2n, 3n], n => n * 10n);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 27, 46))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 27, 46))

bigIntArray = BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 28, 34))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 28, 40))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 28, 47))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 28, 54))

bigIntArray = BigInt64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 29, 34))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 29, 40))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 29, 47))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 29, 54))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 29, 66))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 29, 66))

bigUintArray = BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 30, 36))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 30, 42))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 30, 49))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 30, 56))

bigUintArray = BigUint64Array.from({0: 1n, 1: 2n, 2: 3n, length: 3}, n => n * 10n);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 31, 36))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 31, 42))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 31, 49))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 31, 56))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 31, 68))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 31, 68))

bigIntArray = BigInt64Array.from(['1', '2', '3']);
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

bigIntArray = BigInt64Array.from(['1', '2', '3'], s => BigInt(s));
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))
>s : Symbol(s, Decl(bigintWithoutLib.ts, 33, 49))
>s : Symbol(s, Decl(bigintWithoutLib.ts, 33, 49))

let len: number = bigIntArray.length;
>len : Symbol(len, Decl(bigintWithoutLib.ts, 34, 3))
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

bigIntArray.length = 10;
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

let arrayBufferLike: ArrayBufferView = bigIntArray;
>arrayBufferLike : Symbol(arrayBufferLike, Decl(bigintWithoutLib.ts, 36, 3))
>ArrayBufferView : Symbol(ArrayBufferView, Decl(lib.es5.d.ts, --, --))
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

// Test BigUint64Array
let bigUintArray: BigUint64Array = new BigUint64Array();
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>BigUint64Array : Symbol(BigUint64Array)

bigUintArray = new BigUint64Array(10);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))

bigUintArray = new BigUint64Array([1n, 2n, 3n]);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))

bigUintArray = new BigUint64Array({0: 1n, 1: 2n, 2: 3n, length: 3});
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 42, 35))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 42, 41))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 42, 48))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 42, 55))

bigUintArray = new BigUint64Array([1, 2, 3]);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))

bigUintArray = new BigUint64Array({0: 1, 1: 2, 2: 3, length: 3});
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>0 : Symbol(0, Decl(bigintWithoutLib.ts, 44, 35))
>1 : Symbol(1, Decl(bigintWithoutLib.ts, 44, 40))
>2 : Symbol(2, Decl(bigintWithoutLib.ts, 44, 46))
>length : Symbol(length, Decl(bigintWithoutLib.ts, 44, 52))

bigUintArray = new BigUint64Array(new ArrayBuffer(80));
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8, 3);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

bigUintArray = BigUint64Array.from([1n, 2n, 3n]);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))

bigUintArray = BigUint64Array.from([1n, 2n, 3n], n => n * 10n);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 49, 48))
>n : Symbol(n, Decl(bigintWithoutLib.ts, 49, 48))

bigUintArray = BigUint64Array.from(['1', '2', '3']);
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))

bigUintArray = BigUint64Array.from(['1', '2', '3'], s => BigInt(s));
>bigUintArray : Symbol(bigUintArray, Decl(bigintWithoutLib.ts, 39, 3))
>s : Symbol(s, Decl(bigintWithoutLib.ts, 51, 51))
>s : Symbol(s, Decl(bigintWithoutLib.ts, 51, 51))

len = bigIntArray.length;
>len : Symbol(len, Decl(bigintWithoutLib.ts, 34, 3))
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

bigIntArray.length = 10;
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

arrayBufferLike = bigIntArray;
>arrayBufferLike : Symbol(arrayBufferLike, Decl(bigintWithoutLib.ts, 36, 3))
>bigIntArray : Symbol(bigIntArray, Decl(bigintWithoutLib.ts, 17, 3))

// Test added DataView methods
const dataView = new DataView(new ArrayBuffer(80));
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))
>DataView : Symbol(DataView, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>ArrayBuffer : Symbol(ArrayBuffer, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

dataView.setBigInt64(1, -1n);
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

dataView.setBigInt64(1, -1n, true);
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

dataView.setBigInt64(1, -1);
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

dataView.setBigUint64(2, 123n);
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

dataView.setBigUint64(2, 123n, true);
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

dataView.setBigUint64(2, 123);
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

bigintVal = dataView.getBigInt64(1);
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

bigintVal = dataView.getBigInt64(1, true);
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

bigintVal = dataView.getBigUint64(2);
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

bigintVal = dataView.getBigUint64(2, true);
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))
>dataView : Symbol(dataView, Decl(bigintWithoutLib.ts, 57, 5))

// Test Intl methods with new parameter type
new Intl.NumberFormat("fr").format(3000n);
>new Intl.NumberFormat("fr").format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --))
>Intl.NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))
>NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --))

new Intl.NumberFormat("fr").format(bigintVal);
>new Intl.NumberFormat("fr").format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --))
>Intl.NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Intl : Symbol(Intl, Decl(lib.es5.d.ts, --, --))
>NumberFormat : Symbol(Intl.NumberFormat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>format : Symbol(Intl.NumberFormat.format, Decl(lib.es5.d.ts, --, --))
>bigintVal : Symbol(bigintVal, Decl(bigintWithoutLib.ts, 3, 3))

